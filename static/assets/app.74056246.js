(function(e){function t(t){for(var s,i,o=t[0],l=t[1],c=t[2],p=0,d=[];p<o.length;p++)i=o[p],n[i]&&d.push(n[i][0]),n[i]=0;for(s in l)Object.prototype.hasOwnProperty.call(l,s)&&(e[s]=l[s]);h&&h(t);while(d.length)d.shift()();return r.push.apply(r,c||[]),a()}function a(){for(var e,t=0;t<r.length;t++){for(var a=r[t],s=!0,o=1;o<a.length;o++){var l=a[o];0!==n[l]&&(s=!1)}s&&(r.splice(t--,1),e=i(i.s=a[0]))}return e}var s={},n={app:0},r=[];function i(t){if(s[t])return s[t].exports;var a=s[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=s,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(a,s,function(t){return e[t]}.bind(null,s));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/";var o=window["webpackJsonp"]=window["webpackJsonp"]||[],l=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var h=l;r.push([0,"chunk-vendors"]),a()})({0:function(e,t,a){e.exports=a("56d7")},"0293":function(e,t,a){"use strict";var s=a("21a2"),n=a.n(s);n.a},"034f":function(e,t,a){"use strict";var s=a("64a9"),n=a.n(s);n.a},"21a2":function(e,t,a){},"56d7":function(e,t,a){"use strict";a.r(t);var s=a("2b0e"),n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{attrs:{id:"app"}},[e.catShowing?e._e():a("Burger",{attrs:{title:e.mnuTitle,toggleShow:e.toggleCatalog}}),a("transition",{attrs:{name:"slide-fade",mode:"out-in"}},[a(e.view,{tag:"component",attrs:{next:e.next}})],1)],1)},r=[],i=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("header",{staticClass:"bg-white-50 fixed br b--near-white h-100 "},[a("nav",{staticClass:"f7 fw6 tracked flex flex-column"},[a("a",{staticClass:"link black-70 no-underline w-25 mh3  mt3",on:{click:e.toggleShow}},[a("svg",{staticClass:"dib h1 w1",staticStyle:{fill:"currentcolor"},attrs:{"data-icon":"grid",viewBox:"0 0 32 32"}},[a("title",[e._v(e._s(e.title))]),a("path",{attrs:{d:"M2 2 L10 2 L10 10 L2 10z M12 2 L20 2 L20 10 L12 10z M22 2 L30 2 L30 10 L22 10z M2 12 L10 12 L10 20 L2 20z M12 12 L20 12 L20 20 L12 20z M22 12 \nL30 12 L30 20 L22 20z M2 22 L10 22 L10 30 L2 30z M12 22 L20 22 L20 30 L12 30z M22 22 L30 22 L30 30 L22 30z"}})])]),a("a",{staticClass:"w-25 mh3 mv6 b--black-50"}),a("a",{staticClass:"black-70 outline w-25 mh3 mt7-l"},[e._v("興怡")])])])},o=[],l={name:"Burger",props:["title","toggleShow"]},c=l,h=a("2877"),p=Object(h["a"])(c,i,o,!1,null,null,null);p.options.__file="Burger.vue";var d=p.exports,f=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("article",{staticClass:"bg-black white"},[a("header",{staticClass:" bg-near-black sans-serif"},[a("div",{staticClass:"mw9 center pa4 pt5-ns ph7-l"},[a("time",{staticClass:"f6 mb2 dib ttu tracked"},[a("small",[e._v(e._s(e.stamp))])]),e._m(0),a("h4",{staticClass:"f3 fw1 georgia i"},[e._v("To FHIR and back, a round trip ping/echo.")]),a("h5",{staticClass:"f6 ttu tracked silver"},[e._v('By 興怡 "HL7Lot11" 杜')])])]),e._m(1)])},u=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("h3",{staticClass:"f2 f1-m f-headline-l measure-narrow lh-title mv0"},[a("span",{staticClass:"lh-copy silver pa1 tracked-tight"},[e._v("\n          FHIR Proof\n        ")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"pa4 ph7-l mw9-l center ",staticStyle:{"font-family":"playfair"}},[s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        To catapult us in, we'll begin with the code.\n        Rather than lead with the why, what, or how.\n      ")]),s("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Goal")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        FHIR data round trip\n        "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://accidental-oil.glitch.me"}},[e._v("(proof of concept)")])]),s("figure",[s("img",{staticClass:"w-100 f5 measure",attrs:{src:a("97c2"),alt:"Subsystems diagram"}}),s("figcaption",[e._v("Subsystems")])]),s("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Fhirbase")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        The first and most important piece is\n        "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://www.health-samurai.io/fhirbase"}},[e._v("Fhirbase")]),e._v("\n         "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/fhirbase/fhirbase"}},[e._v("(Github)")]),e._v(".\n        I plan to write more about Fhirbase in a future post, but you'll get a abundance of information from their helpful documentation.\n        I went to their\n        "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://fhirbase.aidbox.app/getting-started"}},[e._v("Get Started")]),e._v("\n        page, and followed those instructions with just a\n        a small detour.\n        For me, the easiest way to install a PostgreSQL local dev instance was through\n        the "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://snapcraft.io/postgresql10"}},[e._v("Snapcraft package")]),e._v(".\n\n        "),s("ol",{attrs:{type:"1"}},[e._v("Which boils down to\n          "),s("li",[e._v("Snapd / Snappy (Already done)")]),s("li",[s("span",{staticClass:"code"},[e._v("sudo snap install postgresql10")])]),s("li",[s("span",{staticClass:"code"},[e._v("sudo adduser postgres")])])])]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        After the Fhirbase installation is done, you can list the procedures:\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v("\n$ sudo -iu postgres\n$ postgresql10.pgctl -D $HOME/snap/postgresql10/common/data -l $HOME/snap/postgresql10/common/logs/logfile start\n$ postgresql10.psql -h 127.0.0.1 -d fhirbase\nfhirbase=# \\df\nfhirbase=# \\sf fhirbase_read\n      ")])]),e._v("\n        The "),s("span",{staticClass:"code"},[e._v("fhirbase_read")]),e._v(" procedure should be displayed:\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v("\nCREATE OR REPLACE FUNCTION public.fhirbase_read(resource_type text, id text)\n RETURNS jsonb\n LANGUAGE plpgsql\nAS $function$\n\n// snip...\n// ...snip\n      ")])]),s("ol",{attrs:{type:"1"}},[e._v("Optional steps\n          "),s("li",[e._v("pg.sh "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://gist.github.com/patterns/c9881f3d6864869c9447ad585030d8ec"}},[e._v("(Gist)")]),s("ol",{attrs:{type:"a"}},[s("li",[s("span",{staticClass:"code"},[e._v("./pg.sh fhirbase")])]),s("li",[s("span",{staticClass:"code"},[e._v("select id, resource->'name', resource->'gender' from patient where id = 'd3af67c9-0c02-45f2-bc91-fea45af3ee83';")])])])]),s("li",[e._v("Alias pg commands\n              "),s("ol",{attrs:{type:"a"}},[s("li",[s("span",{staticClass:"code"},[e._v("sudo snap alias postgresql10.pgctl pg_ctl ")])]),s("li",[s("span",{staticClass:"code"},[e._v("sudo snap alias postgresql10.psql psql ")])])])])])]),s("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("fhirbuffer")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      Once you have Fhirbase, the next step is to export the data\n      for use by client tasks. That's our\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhirbuffer"}},[e._v("fhirbuffer service")]),e._v(".\n      fhirbuffer is based on the\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://grpc.io/docs/tutorials/basic/go.html"}},[e._v("gRPC basics for Go")]),e._v(" walkthrough.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      We start by writing a protocol definition: "),s("span",{staticClass:"code"},[s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhirbuffer"}},[e._v("fhirbuffer.proto")])]),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v('\n// Protocol buffer description for a FHIR persistence tier service\n\nsyntax = "proto3";\n\npackage fhirbuffer;\n\n// Interface exported by the server.\nservice Fhirbuffer {\n\n // Obtains the healthcare resource that matches the search criteria.\n rpc Read(Search) returns (Record) {}\n\n // Modifies the healthcare resource \n rpc Update(Change) returns (Record) {}\n\n}\n\n// A search criteria to request the healthcare resource.\nmessage Search {\n // A ID is the UUID of the record \n string id = 1;\n\n // The resource type\n string type = 2;\n}\n\n// A modification to change the healthcare resource.\nmessage Change {\n bytes resource = 1;\n}\n\n// A healthcare resource returned from the data store.\nmessage Record {\n bytes resource = 1;\n}\n      ')])]),e._v("\n      For now, we're happy with just the "),s("span",{staticClass:"code"},[e._v("Read()")]),e._v(" and "),s("span",{staticClass:"code"},[e._v("Update()")]),e._v(" calls for our service.\n      "),s("span",{staticClass:"code"},[e._v("Read")]),e._v(" accepts a "),s("span",{staticClass:"code"},[e._v("Search")]),e._v("\n      parameter which translates into a request message with the "),s("span",{staticClass:"code"},[e._v("id")]),e._v(" and "),s("span",{staticClass:"code"},[e._v("type")]),e._v(" fields.\n      The "),s("span",{staticClass:"code"},[e._v("id")]),e._v(" is a UUID value that uniquely identifies a patient, in this case.\n      The "),s("span",{staticClass:"code"},[e._v("type")]),e._v(" is the resource type which, for our purposes, will be "),s("span",{staticClass:"code"},[e._v('"Patient"')]),e._v(".\n      The result returned will be a "),s("span",{staticClass:"code"},[e._v("Record")]),e._v(" response. Note that the\n      "),s("span",{staticClass:"code"},[e._v("resource")]),e._v(" field is declared as "),s("span",{staticClass:"code"},[e._v("bytes")]),e._v(".\n      These bytes will hold JSON. If this looks familiar, you're right!\n      It's no accident that this definition matches the stored procedure "),s("span",{staticClass:"code"},[e._v("fhirbase_read/update")]),e._v(" exactly.\n      In this respect, fhirbuffer is a paper-thin wrapper around Fhirbase.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      It's time to generate. Hopefully, you've already done the gRPC basics guide because the toolchain is required to proceed.\n      To do anything with our "),s("span",{staticClass:"code"},[e._v(".proto")]),e._v(" file, we need to run\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/google/protobuf/releases"}},[e._v("protoc")]),e._v(".\n      As an alternative, we can run the commands inside a Docker container.\n      You can save "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://gist.github.com/patterns/2194fa93d6f29c442907cf77d6ab84cd"}},[e._v("this Gist")]),e._v(" as the Dockerfile.\n      Then build the image, and run. For example, assuming\n      "),s("span",{staticClass:"code"},[e._v("test")]),e._v(" is the save directory\n      (where you have the "),s("span",{staticClass:"code"},[e._v(".proto")]),e._v(" file, and Dockerfile) here are the steps from the shell prompt:\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v("\n$ cd test\n$ docker build -t protoc .\n$ docker run -ti --rm -v $PWD:/app -w /app --entrypoint sh protoc\n# protoc -I ./ fhirbuffer.proto --go_out=plugins=grpc:.\n# exit\n      ")])]),e._v("\n      That should produce a new file with a "),s("span",{staticClass:"code"},[e._v(".pb.go")]),e._v(" extension.\n      Awesome right? Just soak it in.\n      We're not going to do anything since it is generated code,\n      but what we have here is the interface.\n      It gets the contract down in code so that we can start making calls from Go.\n      If you're not impressed that's okay too, we'll get another chance later with some Elixir.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      So what do we do with the new generated "),s("span",{staticClass:"code"},[e._v("fhirbuffer.pb.go")]),e._v(" file?\n      We'll start by making the service which interacts with the Fhirbase database.\n      Skipping a few lines for clarity, here is our\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhirbuffer/blob/master/cmd/server/main.go"}},[s("span",{staticClass:"code"},[e._v("main")]),e._v(" function")]),e._v(":\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v('\npackage main\n\nimport (\n// snip...\n// ...snip\n\n\tpb "github.com/patterns/fhirbuffer"\n\t"google.golang.org/grpc"\n\t"google.golang.org/grpc/credentials"\n)\n// snip...\n// ...snip\n\nfunc main() {\n\tflag.Parse()\n\taddr := fmt.Sprintf("localhost:%d", *port)\n\tlis, err := net.Listen("tcp", addr)\n\tif err != nil {\n\t\tlog.Fatalf("failed to listen: %v", err)\n\t}\n\tlog.Println("Listening on ", addr)\n\tvar opts []grpc.ServerOption\n\tif *tls {\n\t// snip...\n\t// ...snip\n\t}\n\tgrpcServer := grpc.NewServer(opts...)\n\tpb.RegisterFhirbufferServer(grpcServer, newServer())\n\tgrpcServer.Serve(lis)\n}\n      ')])]),e._v("\n      We're not straying far from the gRPC basics guide. The only difference is the "),s("span",{staticClass:"code"},[e._v("import pb")]),e._v(" line, and\n      the register call "),s("span",{staticClass:"code"},[e._v("pb.RegisterFhirbufferServer")]),e._v(". Even the register function was generated for us.\n      Now let's examine what's behind "),s("span",{staticClass:"code"},[e._v("newServer()")]),e._v(" in \n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhirbuffer/blob/master/cmd/server/fhirbuffer.go"}},[s("span",{staticClass:"code"},[e._v("fhirbuffer.go")])]),e._v(":\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v('\npackage main\n\nimport (\n\t"context"\n\t"log"\n\n\t"github.com/jackc/pgx"\n\tpb "github.com/patterns/fhirbuffer"\n)\n\nvar (\n\tdatabaseConfig *pgx.ConnConfig = &pgx.ConnConfig{Host: "127.0.0.1", User: "postgres", Password: "postgres", Database: "fhirbase"}\n)\n\ntype fhirbuffer struct{}\n\nfunc (s *fhirbuffer) Read(ctx context.Context, req *pb.Search) (*pb.Record, error) {\n\tconn, err := pgx.Connect(*databaseConfig)\n\tif err != nil {\n\t\tlog.Printf("Database connection, %v", err)\n\t\treturn &pb.Record{}, err\n\t}\n\tdefer conn.Close()\n\n\tqr := conn.QueryRow("SELECT PUBLIC.fhirbase_read( $1 , $2 )", req.Type, req.Id)\n\treturn s.runStmt(ctx, qr)\n}\n\nfunc (s *fhirbuffer) Update(ctx context.Context, req *pb.Change) (*pb.Record, error) {\n\tconn, err := pgx.Connect(*databaseConfig)\n\tif err != nil {\n\t\tlog.Printf("Database connection, %v", err)\n\t\treturn &pb.Record{}, err\n\t}\n\tdefer conn.Close()\n\n\tqr := conn.QueryRow("SELECT PUBLIC.fhirbase_update( $1 )", req.Resource)\n\treturn s.runStmt(ctx, qr)\n}\n// snip...\n// ...snip\n\nfunc newServer() *fhirbuffer {\n\ts := &fhirbuffer{}\n\treturn s\n}\n      ')])]),e._v("\n      So "),s("span",{staticClass:"code"},[e._v("newServer()")]),e._v(" simply returns a struct which we declare.\n      Also, we code the logic of "),s("span",{staticClass:"code"},[e._v("Read()")]),e._v(" and "),s("span",{staticClass:"code"},[e._v("Update()")]),e._v(".\n      Whose sole purpose is execution of the "),s("span",{staticClass:"code"},[e._v("fhirbase_read")]),e._v(" and\n      "),s("span",{staticClass:"code"},[e._v("fhirbase_update")]),e._v(" stored procedures, respectively.\n      We went with "),s("span",{staticClass:"code"},[e._v("QueryRow")]),e._v(" because the expected return result will be one row,\n      and this row result doesn't require that we make a "),s("span",{staticClass:"code"},[e._v("Close()")]),e._v(" call explicitly.\n      Most of the logic is database connection related, and we relied on the examples \n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/jackc/pgx"}},[e._v("\n      (Jack Christensen's PGX)")]),e._v(" for guidance.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      Additional notes, the types like Record, Search, and Change were generated.\n      We aren't automated out of a job though, we still had to code.\n      By fleshing out "),s("span",{staticClass:"code"},[e._v("Read()")]),e._v(" and "),s("span",{staticClass:"code"},[e._v("Update()")]),e._v(", we're implementing the interface.\n      We'll get compiler warnings, if we forget to code something that's required\n      by the generated contract in "),s("span",{staticClass:"code"},[e._v("fhirbuffer.pb.go")]),e._v(".\n      We also made a "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhirbuffer/tree/master/cmd/client"}},[e._v("client")]),e._v("\n      as shown in the gRPC basics guide,\n      and it is indispensable as a makeshift test harness during each iteration.\n      ")]),s("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("fhirshape")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      So far, so good. We have the foundational persistence layer from the Fhirbase database,\n      then we made fhirbuffer to export the Patient resource.\n      At this point, it's a good time to remember that the FHIR standard is predominantly delivered as a \n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://www.hl7.org/fhir/http.html"}},[e._v("RESTful API")]),e._v(".\n      ")]),s("blockquote",{staticClass:"baskerville measure-narrow fw1 f5 lh-copy pl4-l bn bl-l bw2 b--black-40 lh-title-l f2-l"},[e._v('\n        "Aligning FHIR APIs to the REST architectural style ensure that all transactions are stateless ....."\n          '),s("span",{staticClass:"georgia db f6 mt4"},[e._v("\n            ―2.16.2 FHIR and Architectural Principles, "),s("cite",[e._v("Scalability")])])]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v('\n      Which leads to the question, "Why do we need the fhirbuffer service?\n      why not spool the JSON directly from Fhirbase and/or pair it to the REST service."\n      I hope to go into this in another post. For now, try to suspend your disbelief as we make the trek into Elixir.\n      ')]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      In creating our REST service\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhircare_umbrella/tree/master/apps/fhirshape"}},[e._v("fhirshape")]),e._v(", \n      we referred to a few\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://medium.com/@njwest/jwt-auth-with-an-elixir-on-phoenix-1-3-guardian-api-and-react-native-mobile-app-1bd00559ea51"}},[e._v("How-To articles")]),e._v("\n      that show the "),s("span",{staticClass:"code"},[e._v("--no-html")]),e._v(" and "),s("span",{staticClass:"code"},[e._v("--no-webpack")]),e._v(" options.\n      The beacon of light, though, was the\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://medium.com/@KevinHoffman/mutual-tls-over-grpc-with-elixir-a071d514deb3"}},[e._v("walkthrough by Kevin Hoffman")]),e._v(".\n      It showed that you could do gRPC from Elixir. On top of that, you'll do it in style with "),s("span",{staticClass:"b"},[e._v("mutual TLS")]),e._v(".\n      I won't repeat his great article, except this piece to kick things off:\n      \"I used "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/tony612/grpc-elixir"}},[e._v("this gRPC library")]),e._v(".\"\n      Sorry that wasn't as dramatic as I thought.\n      It's after clicking into the link.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      Here's the snippet courtesy of the library author, Tony Han\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v("\n$ protoc --elixir_out=plugins=grpc:./lib/ *.proto\n      ")])]),e._v("\n      BOOM. Riiiight? Who's impressed now?\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      That "),s("span",{staticClass:"code"},[e._v("fhirbuffer.proto")]),e._v(" file we made for our Go project earlier, it's also going to work here in our Elixir project.\n      With our same Docker container, the steps are:\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v("\n$ cd test\n$ docker run -ti --rm -v $PWD:/app -w /app --entrypoint sh protoc\n$ protoc --elixir_out=plugins=grpc:. fhirbuffer.proto\n# exit\n      ")])]),e._v("\n      That should produce a new "),s("span",{staticClass:"code"},[e._v("fhirbuffer.pb.ex")]),e._v(" file.\n      Just like that, you now have your Search, Change, Record types in Elixir.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      Placing the new "),s("span",{staticClass:"code"},[e._v(".pb.ex")]),e._v(" file inside the\n      "),s("span",{staticClass:"code"},[e._v("fhircare_umbrella/apps/fhirshape/lib")]),e._v(" directory is all that's required to begin.\n      As we saw before, we'll need to write code.\n      The interesting point to keep in mind this round, is that fhirshape consumes the gRPC functions.\n      Let's look at the logic for our\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhircare_umbrella/blob/master/apps/fhirshape/lib/healthcare/healthcare.ex"}},[e._v("Healthcare context")]),e._v("\n      to see how fhirshape is a client to fhirbuffer.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      Starting with the "),s("span",{staticClass:"code"},[e._v("read")]),e._v(" call:\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v('\ndefmodule Fhirshape.Healthcare do\n\n// snip...\n// ...snip\n \n  def get_patient!(id) do\n    {:ok, json} = read_resource(id, "Patient")\n    %Patient{resource: json}\n  end\n\n// snip...\n// ...snip\n\n  defp read_resource(id, type) do\n\n    // snip...\n    // ...snip\n\n    opts = [cred: cred]\n    request = Fhirbuffer.Search.new(id: id, type: type)\n\n    case GRPC.Stub.connect(@fhirbuffer_addr, opts) do\n      {:ok, channel} ->\n        try do\n          {:ok, reply} = Fhirbuffer.Fhirbuffer.Stub.read(channel, request)\n          {:ok, reply.resource}\n        after\n          GRPC.Stub.disconnect(channel)\n        end\n\n      _ ->\n        {:error, "gRPC connect failed (check TLS credentials)"}\n    end\n  end\n      ')])]),e._v("\n      The "),s("span",{staticClass:"code"},[e._v("get_patient!()")]),e._v(" function is invoked by the\n      "),s("span",{staticClass:"code"},[e._v("patient_controller")]),e._v(" in order to handle a GET request for a Patient resource.\n      We pass-through to "),s("span",{staticClass:"code"},[e._v("read_resource()")]),e._v("\n      which seems a waste, but it was in anticipation of negotiating other resources besides Patients.\n      Notice that "),s("span",{staticClass:"code"},[e._v("read_resource()")]),e._v(" isn't Patient specific, it's resource type agnostic.\n      This is thanks to the Fhirbase "),s("span",{staticClass:"code"},[e._v("fhirbase_read()")]),e._v(" procedure which itself isn't coupled to one resource type.\n      The "),s("span",{staticClass:"code"},[e._v("Fhirbuffer.Search")]),e._v(" type, and\n      "),s("span",{staticClass:"code"},[e._v("Fhirbuffer.Fhirbuffer.Stub.read()")]),e._v(" function were generated by protoc.\n      So after the gRPC connection is established, we can call\n      "),s("span",{staticClass:"code"},[e._v("Fhirbuffer.Fhirbuffer.Stub.read()")]),e._v(" with the\n      "),s("span",{staticClass:"code"},[e._v("Fhirbuffer.Search")]),e._v(" filter criteria.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      Comparing the "),s("span",{staticClass:"code"},[e._v("update")]),e._v(" call, the logic flow is very simular:\n      "),s("pre",{staticClass:"f6 lh-solid br2 ba b--silver light-green"},[s("code",[e._v('\n// snip...\n// ...snip\n\n  def update_patient(%Patient{} = patient, attrs) do\n    proposed = Poison.decode!(attrs)\n    source = Poison.decode!(patient.resource)\n\n    cond do\n      Map.has_key?(source, "id") && source["id"] == proposed["id"] ->\n        {:ok, savjson} =\n          source\n          |> Map.merge(proposed)\n          |> Poison.encode!()\n          |> update_resource()\n\n        {:ok, %Patient{resource: savjson}}\n\n      true ->\n        Logger.debug("Patient ID is ambiguous #{inspect(attrs)}")\n        {:error, %Ecto.Changeset{}}\n    end\n  end\n\n// snip...\n// ...snip\n\n  defp update_resource(json) do\n\n    // snip...\n    // ...snip\n\n    opts = [cred: cred]\n    request = Fhirbuffer.Change.new(resource: json)\n\n    case GRPC.Stub.connect(@fhirbuffer_addr, opts) do\n      {:ok, channel} ->\n        try do\n          {:ok, reply} = Fhirbuffer.Fhirbuffer.Stub.update(channel, request)\n          {:ok, reply.resource}\n        after\n          GRPC.Stub.disconnect(channel)\n        end\n\n      _ ->\n        {:error, "gRPC connect failed (check TLS credentials)"}\n    end\n  end\n      ')])]),e._v("\n      The real difference is in the preparation of the proposed changes.\n      Before making any update, we verify that the UUID of the proposed changes matches the UUID of the resource record in the database.\n      Then we use the "),s("span",{staticClass:"code"},[e._v("Map.merge()")]),e._v(" function to combine\n      the two sets so that new fields will be added, and modified fields are updated.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      The other tidbits worth mentioning are Insomnia, and CORS.\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://insomnia.rest"}},[e._v("Insomnia")]),e._v("\n      is a tool like Postman for testing REST development.\n      CORS was troublesome until others explained things like\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://lobotuerto.com/blog/building-a-json-api-in-elixir-with-phoenix/"}},[e._v("this guide which uses Corsica plugin")]),e._v(".\n      ")]),s("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("fhirping")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n      Almost finished! The last puzzle piece is the UI,\n      that's the client to fhirshape's REST API, which we've named\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhircare_umbrella/tree/master/apps/fhirping"}},[e._v("fhirping")]),e._v(".\n      Without further ado, the\n      "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://accidental-oil.glitch.me"}},[e._v("app hosted on Glitch")]),e._v(".\n      There, the source is available and remixing is easy.\n      ")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[s("ol",{attrs:{type:"I"}},[s("li",[e._v("fhirping\n          "),s("ol",{attrs:{type:"A"}},[s("li",[e._v("Github ( https://github.com/patterns/fhircare_umbrella )\n              "),s("ol",{attrs:{type:"1"}},[s("li",[e._v("Axios (credits https://vuejs.org/v2/cookbook/using-axios-to-consume-apis.html )")]),s("li",[e._v("Components (credits https://css-tricks.com/intro-to-vue-2-components-props-slots/ )")]),s("li",[e._v("Recursion (credits https://stackoverflow.com/a/47312172 )")])])])])])])]),s("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Final Thoughts")]),s("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        There it is, proof of concept --\n        "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://github.com/patterns/fhircare_umbrella/"}},[e._v("FHIR ping")]),e._v("\n         "),s("a",{staticClass:"no-underline bg-animate bg-near-black hover-bg-black washed-green",attrs:{href:"https://accidental-oil.glitch.me"}},[e._v("(Glitch hosted)")])])])}],b={name:"FHIRping0112",props:["next"],data(){return{stamp:"January 12, 2019"}}},g=b,v=(a("6c17"),Object(h["a"])(g,f,u,!1,null,"c90b8562",null));v.options.__file="FHIRping0112.vue";var m=v.exports,_=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("article",[a("header",{staticClass:" bg-near-white sans-serif"},[a("div",{staticClass:"mw9 center pa4 pt5-ns ph7-l"},[a("time",{staticClass:"f6 mb2 dib ttu tracked"},[a("small",[e._v(e._s(e.stamp))])]),e._m(0),a("h4",{staticClass:"f3 fw1 georgia i"},[e._v("The promise of writing Go in place of Javascript is real.")]),a("h5",{staticClass:"f6 ttu tracked gray"},[e._v('By 興怡 "Wasmattayou" 杜')])])]),e._m(1)])},w=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("h3",{staticClass:"f2 f1-m f-headline-l measure-narrow lh-title mv0"},[a("span",{staticClass:"lh-copy gray pa1 tracked-tight"},[e._v("\n          WebAssembly in Go 1.11\n        ")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"pa4 ph7-l mw9-l center",staticStyle:{"font-family":"playfair"}},[a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Okay so writing logic that gets transpiled to Js is not new,\n        actually. "),a("a",{attrs:{href:"https://github.com/gopherjs/gopherjs/"}},[e._v("GopherJs")]),e._v(" and related projects (AsmJs / \n        "),a("a",{attrs:{href:"http://confreaks.tv/videos/emberconf2015-running-c-in-ember-cli-with-emscripten"}},[e._v("Emscripten")]),e._v(") have been very active.\n        The difference is that now in Go 1.11, choosing the\n        "),a("span",{staticClass:"code"},[e._v("GOOS=js GOARCH=wasm")]),e._v(" target\n        makes the compiler output WASM. We don't have to take that extra step to call GopherJs (or Emscripten). \n      ")]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Goal")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Explore the package "),a("span",{staticClass:"code"},[e._v("syscall/js")]),e._v(" capabilities.\n        Does OpenGL get converted to WebGL? Will network connections work?\n        Can we really avoid writing Javascript?\n      ")]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Fibonacci")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Fibonacci appears in many\n        "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=BnYq7JapeDA"}},[e._v("WebAssembly")]),e._v(" examples.\n        It's the Hello World of WebAssembly. We followed the\n        "),a("a",{attrs:{href:"https://developers.google.com/web/updates/2018/03/emscripting-a-c-library"}},[e._v("simple example")]),e._v("\n        with the Go steps from another "),a("a",{attrs:{href:"https://medium.zenika.com/go-1-11-webassembly-for-the-gophers-ae4bb8b1ee03"}},[e._v("intro")]),e._v(". \n        As simple as the fibonacci example is, it was good exercise to get familiar.\n        It demonstrated how Go code can execute inside the browser.\n        One small note, print calls send results to the browser's dev tool console window.\n        The source is in the "),a("a",{attrs:{href:"https://github.com/patterns/hello-wasm"}},[e._v("Github")]),e._v(" repo.\n      ")]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Conway's Life")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n\tAfter the Hello World example, the question became what about graphics? The\n        "),a("a",{attrs:{href:"https://rustwasm.github.io/book/game-of-life/introduction.html"}},[e._v("Rust and WebAssembly")]),e._v(" book\n        had the answer with a tutorial on "),a("span",{staticClass:"i"},[e._v("Conway's Game of Life.")]),e._v("\n        Since I had prior work of\n        "),a("a",{attrs:{href:"https://github.com/patterns/gomobile-life"}},[e._v("Life in Gomobile")]),e._v(",\n        it helped crystallize what pieces combine together to construct a WebAssembly app.\n        So any code that I would change / add fits more in the WASM world.\n        The UI is a HTML5 Canvas. Animating the Canvas involved\n        "),a("span",{staticClass:"code"},[e._v("RequestAnimationFrame")]),e._v(" which is Js, and one of the more\n        abstract pieces due to circular logic.\n        What's interesting is that you begin to perceive presentation layer logic\n        as you make the calls into "),a("span",{staticClass:"code"},[e._v("js.Global")]),e._v(" scope.\n        With the business logic encapsulated inside the game\n        "),a("span",{staticClass:"code"},[e._v("Tick()")]),e._v(" function; code that stays nicely intact together as pure Go.\n        Also in this tutorial, it's a 2D Canvas so OpenGL calls were not made,\n        but the drawing is equivalent enough to answer our questions.\n        Here we can appreciate Emscripten's lead.\n        I can't bring the Gomobile OpenGL calls directly unmodified.\n        The Go logic to interact with Canvas is really Js, just wrapped calls.\n        You can do the bulk of your code in Go for\n        game, with Js still very necessary. In fact, I would say your Js skills can be enhanced.\n        The source is in the "),a("a",{attrs:{href:"https://github.com/patterns/wasm-life"}},[e._v("Github")]),e._v(" repo.\n      ")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Note that the Js package provides two seemingly redunant functions,\n        "),a("span",{staticClass:"code"},[e._v("Call()")]),e._v(" and "),a("span",{staticClass:"code"},[e._v("Invoke()")]),e._v(".\n        It turns out "),a("span",{staticClass:"code"},[e._v("Invoke")]),e._v(" accepts a Js function object (a.k.a. delegate).\n        "),a("span",{staticClass:"code"},[e._v("Invoke")]),e._v(" is useful with the "),a("span",{staticClass:"code"},[e._v("NewCallback")]),e._v("\n        and "),a("span",{staticClass:"code"},[e._v("NewEventCallback")]),e._v(" functions.\n        Whereas "),a("span",{staticClass:"code"},[e._v("Call")]),e._v(" expects a field name (a.k.a. member) to execute,\n        and is very common with existing functions, e.g. "),a("span",{staticClass:"code"},[e._v("getElementById")]),e._v(".\n      ")]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("WebSockets")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Gaining some footing on the layers was good groundwork to discover WebSockets, and testing whether\n        network connections "),a("span",{staticClass:"i"},[e._v("just work")]),e._v(" when compiled into WASM.\n        First, why WebSockets when Go has a native "),a("span",{staticClass:"code"},[e._v("net")]),e._v(" package?\n        Remembering that WASM is like AsmJs (Js), it makes sense to view\n        all that code as browser side (ignoring NodeJs for now). \n        Normally the browser doesn't keep state, and Ajax has cross-site restrictions.\n        WebSockets were meant to support a stateful full-duplex connection in-browser.\n        So this seemed like the easiest way to test net connections.\n      ")]),e._v("\n      <DIAGRAM PLACEHOLDER>\n      "),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        To experiment with WebSockets, we begin with the\n        "),a("a",{attrs:{href:"https://github.com/gorilla/websocket/tree/master/examples/chat"}},[e._v("example by Gorilla")]),e._v(".\n\tTranslating the HTML page, and building the WASM showed that WebSockets work fine.\n        Then we add the computation intensive BTC Vanity command to\n        demonstrate the use case of a operation that is possible, but would recommend against writing Js.\n        The source is in the "),a("a",{attrs:{href:"https://github.com/patterns/wasm-websocket"}},[e._v("Github")]),e._v(" repo.\n      ")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Note that to instantiate a WebSocket, the Js package provides a "),a("span",{staticClass:"code"},[e._v("New()")]),e._v(" function.\n\n      ")]),a("div",{staticClass:"pv4 gray courier"},[a("label",{staticClass:"f6 b db mb2",attrs:{for:"coddl"}},[e._v("WebSocket instance")]),a("div",{staticClass:"db border-box hover-black w-100 measure ba b--black-20 pv2 br2 mb2 bg-washed-yellow gray nowrap",attrs:{id:"coddl",name:"coddl"}},[a("pre",[e._v('w := js.Global().Get("WebSocket")\nws := w.New(url)\n')])])]),a("p"),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Final Thoughts")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Not ignoring the concerns that have been expressed about file size\n        ("),a("a",{attrs:{href:"https://blog.lazyhacker.com/2018/06/go-with-webassembly-early-examples.html"}},[e._v("Lazy Hacker")]),e._v("), and performance\n        ("),a("a",{attrs:{href:"https://dev.to/hajimehoshi/gopherjs-vs-webassembly-for-go-148m"}},[e._v("Ebiten benchmark")]),e._v(").\n        This whole experiment was to test if we can write strongly typed, and compiled \"Js\" / Not-Js.\n        It's not Emscripten level coverage, but you can see what's possible with people already writing\n        "),a("a",{attrs:{href:"https://medium.com/perlin-network/life-a-secure-blazing-fast-cross-platform-webassembly-vm-in-go-ea3b31fa6e09"}},[e._v("extensions in the space")]),e._v(".\n      ")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        I used to have a favorite answer for when team members pointed out that file i/o or reflection was slow.\n        \"If speed is a problem, let's write it in assembly. "),a("span",{staticClass:"i"},[e._v("We don't.")]),e._v('"\n      ')]),a("img",{staticClass:"mh7",attrs:{src:"https://imgs.xkcd.com/comics/optimization.png",alt:"XKCD:Optimization"}}),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        I was wrong -- assembly is back!*\n      ")]),a("p",{staticClass:"f7 measure"},[e._v("\n        *I didn't hand craft any WASM directly, but you get my meaning.\n      ")])])}],C={name:"WebAssembly0919",props:["next"],data(){return{stamp:"September 19, 2018"}}},y=C,k=(a("bdb5"),Object(h["a"])(y,_,w,!1,null,"a4ca2e1e",null));k.options.__file="WebAssembly0919.vue";var S=k.exports,x=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},T=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("article",[a("header",{staticClass:"candycane sans-serif"},[a("div",{staticClass:"mw9 center pa4 pt5-ns ph7-l"},[a("time",{staticClass:"f6 mb2 dib ttu tracked"},[a("small",[e._v("18 August, 2018")])]),a("h3",{staticClass:"f2 f1-m f-headline-l measure-narrow lh-title mv0"},[a("span",{staticClass:"lh-copy gray pa1 tracked-tight"},[e._v("\n          SQLite Test Drive\n        ")])]),a("h4",{staticClass:"f3 fw1 georgia i"},[e._v("The single file database used everywhere, most notably in airplanes.")]),a("h5",{staticClass:"f6 ttu tracked gray"},[e._v('By 興怡 "Giterdun" 杜')])])]),a("div",{staticClass:"pa4 ph7-l mw9-l center",staticStyle:{"font-family":"playfair"}},[a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        At Go Northwest, David Crawshaw made a "),a("a",{attrs:{href:"https://crawshaw.io/blog/one-process-programming-notes"}},[e._v("presentation on SQLite.")]),e._v("\n        He suggested half jokingly that the big cloud service providers are not trustworthy. Fairly humorous, and good food for thought.\n        The key take-aways for me were:\n        "),a("ul",[a("li",[e._v("Used in avionics, and is probably the most tested software product.")]),a("li",[e._v("Ships in many devices including Android, and Macbooks.")]),a("li",[e._v("Single file with little configuration required.")]),a("li",[e._v("Avoid locking the database.")]),a("li",[e._v("Since it's a local file, have a backup plan (e.g., cloud storage).")]),a("li",[e._v("Like the Macaroons talk, use the simpler single architecture until you actually need more.")])])]),a("blockquote",{staticClass:"baskerville measure-narrow fw1 f5 lh-copy pl4-l bn bl-l bw2 b--black-40 lh-title-l f2-l"},[e._v('\n        "Your mind is for having ideas, not holding them."\n          '),a("span",{staticClass:"georgia db f6 mt4"},[e._v("\n            ―David Allen, Author of "),a("cite",[e._v("Getting Things Done")])])]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        He made a compelling case, as I've been scrambling to learn Go, Ember/Glimmer, then Elixir, Vue, and just recently began investigating Dart, Elm, Rust, and WASM.\n        We're constantly faced with more technology stacks to evaluate for our toolbox.\n        His logic made a lot of sense for leveraging one language together with one very stable database.\n        So I wanted to explore SQLite with a CRM experiment.\n      ")]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Goal")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Kick the SQLite tires enough to go beyond Hello-World. Make a customer database.\n      ")]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Data Schema")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        It's a helpful step to brainstorm reports that you want to see generated out of the collected data.\n        Roughly, a daily list of priority events for each company seems appropriate.\n        Then different aggregation of events can turn into trends, as one interpretation.\n        "),a("ul",[a("li",[e._v(" Company: PK, Name, Status")]),a("li",[e._v(" Contact: PK, Firstname, Lastname, E-mail, Phone, LinkedIn")]),a("li",[e._v(" Event:   PK, Note, EventType, Timestamp, CompanyFK")]),a("li",[e._v(" Bridge:  one-many for company to contacts")])]),a("img",{staticClass:"w-100 f5 measure",attrs:{src:"images/er.svg",alt:"Photo of outer space"}})]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        With this company schema in mind, the DDL statement translates to:\n      ")]),a("form",{staticClass:"pv4 gray courier"},[a("div",[a("label",{staticClass:"f6 b db mb2",attrs:{for:"coddl"}},[e._v("Company definition")]),a("textarea",{staticClass:"db border-box hover-black w-100 measure ba b--black-20 pv2 br2 mb2 bg-washed-yellow gray nowrap",attrs:{id:"coddl",name:"coddl",readonly:"","aria-describedby":"coddl-desc"}},[e._v("create table if not exists company(id integer primary key, name text NOT NULL, status integer DEFAULT 0)\n    ")])])]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("SQLite")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        The talk already gave a good jump start, and referenced the DB driver from\n        "),a("a",{attrs:{href:"https://github.com/mattn/go-sqlite3"}},[e._v("Yasuhiro Matsumoto")]),e._v(".\n        Scanning the examples subdirectory, the simple (simple.go) program turns out to be very helpful.\n        It shows how to run SQL statements in the database. There are calls to handle multiple rows, single row,\n        executing DML with no return, and running transactions. Borrowing heavily from this example, the Go\n        data abstraction writes itself.\n      ")]),a("form",{staticClass:"pv4 gray courier"},[a("div",[a("label",{staticClass:"f6 b db mb2",attrs:{for:"cocrud"}},[e._v("CRUD")]),a("pre",[a("textarea",{staticClass:"db border-box hover-black w-100 measure ba b--black-20 pv2 br2 mb2 bg-washed-yellow gray h4",attrs:{id:"cocrud",name:"cocrud",readonly:"","aria-describedby":"cocrud-desc"}},[e._v('func AddCompany(co Company) {\n        stmt, err := crmdb.Prepare(DB_MCOMPANY)\n        if err != nil {\n                log.Fatal(err)\n        }\n        defer stmt.Close()\n\n        _, err = stmt.Exec(co.Attributes.Name, co.Attributes.Status)\n        if err != nil {\n                log.Fatal(err)\n        }\n}\n\nfunc UpdateCompany(co Company) {\n        stmt, err := crmdb.Prepare(DB_UCOMPANY)\n        if err != nil {\n                log.Fatal(err)\n        }\n        defer stmt.Close()\n\n        _, err = stmt.Exec(co.Attributes.Name, co.Attributes.Status, co.Id)\n        if err != nil {\n                log.Fatal(err)\n        }\n}\n\nfunc FetchCompany() Companies {\n        rows, err := crmdb.Query(DB_QCOMPANY)\n        if err != nil {\n                log.Fatal(err)\n        }\n        defer rows.Close()\n        ls := []Company{}\n\n        for rows.Next() {\n                var (\n                        id     int\n                        name   string\n                        status int\n                )\n                err = rows.Scan(&id, &name, &status)\n                if err != nil {\n                        log.Fatal(err)\n                }\n\n                a := Attr{name, status}\n                c := Company{"companies", strconv.Itoa(id), a}\n                ls = append(ls, c)\n        }\n        err = rows.Err()\n        if err != nil {\n                log.Fatal(err)\n        }\n        return Companies{ls}\n}\n    ')])])])]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("JSONAPI")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        All the tutorials for building REST APIs take advantage of mux libraries that parse URL paths.\n        For the scope of this experiment and enrichment(?), we try to stay with the native net/http\n        package.\n      ")]),a("form",{staticClass:"pv4 gray courier"},[a("div",[a("label",{staticClass:"f6 b db mb2",attrs:{for:"rest"}},[e._v("REST")]),a("pre",[a("textarea",{staticClass:"db border-box hover-black w-100 measure ba b--black-20 pv2 br2 mb2 bg-washed-yellow gray h4",attrs:{id:"rest",name:"rest",readonly:"","aria-describedby":"rest-desc"}},[e._v('func main() {\n  readiness := gocrm.ReadinessHandler{}\n  readiness.Ready = &atomic.Value{}\n  readiness.Ready.Store(false)\n  gocrm.Init()\n  defer gocrm.Quit()\n  readiness.Ready.Store(true)\n\n  http.Handle("/", gocrm.DefaultHandler{})\n  http.Handle("/companies/", gocrm.CompanyHandler{})\n  http.Handle("/contacts/", gocrm.ContactHandler{})\n  http.Handle("/health", gocrm.HeartbeatHandler{})\n  http.Handle("/ready", readiness)\n\n  server := os.Getenv("SERVER")\n  if server == "" {\n    server = ":8080"\n  }\n  log.Fatal(http.ListenAndServe(server, nil))\n}\n    ')])])])]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        Working through the implementation, it soon becomes apparent that libraries/middleware would also be a big help in solving CORS issues.\n      ")]),a("form",{staticClass:"pv4 gray courier"},[a("div",[a("label",{staticClass:"f6 b db mb2",attrs:{for:"hnd"}},[e._v("Handler")]),a("pre",[a("textarea",{staticClass:"db border-box hover-black w-100 measure ba b--black-20 pv2 br2 mb2 bg-washed-yellow gray h4",attrs:{id:"hnd",name:"hnd",readonly:"","aria-describedby":"hnd-desc"}},[e._v('func (h CompanyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n        // TODO Use a CORS middleware\n        w.Header().Add("Access-Control-Allow-Origin", "*")\n        w.Header().Add("Access-Control-Allow-Headers", "Content-Type")\n        var ls Companies\n\n        switch r.Method {\n        case "POST":\n                co, err := hydrate(r)\n                if err != nil {\n                        http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n                        return\n                }\n                AddCompany(co)\n\n        case "GET":\n                k, err := extractKey(r)\n                if err != nil {\n                        http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n                        return\n                }\n                if k != "" {\n                        ls = FetchCompanyByKey(k)\n                }\n\n        case "PUT":\n                k, err := extractKey(r)\n                if err != nil {\n                        http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n                        return\n                }\n                if k != "" {\n                        co, err := hydrate(r)\n                        if err != nil {\n                                http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)\n                                return\n                        }\n\n                        co.Id = k\n                        UpdateCompany(co)\n                }\n\n        }\n\n        if len(ls.Data) == 0 {\n                ls = FetchCompany()\n        }\n        json.NewEncoder(w).Encode(ls)\n}\n    ')])])])]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        During the code/build/refresh iterations, httpie became a indispensable tool to check the service response.\n        For a local dev service, this worked well. I'm not sure it would be enough with standalone config.\n        So the idea was to spin up the service in Google's Kubernetes to verify. This may be more relevant\n        when creating a client UI. I attempted proof of concepts in Ember and Dart, but would really like\n        to try Elm before having better feedback to report.\n      ")]),a("h3",{staticClass:"georgia ttu f4 f2-ns lh-copy"},[e._v("Final Thoughts")]),a("p",{staticClass:"f5 f3-ns lh-copy measure"},[e._v("\n        I used the memory option in the DSN for the DB connection to postpone having to deal with storage buckets.\n        Similarly, I made the Access-Control-Allow-Origin wildcard, and errors are just fed to log.Fatal.\n        These are items that would need consideration for a live service.\n        Files are located on the "),a("a",{attrs:{href:"https://github.com/patterns/gocrm"}},[e._v("github repo")])])])])}],R={name:"SqliteTest0818",props:["next"]},A=R,I=(a("dca3"),Object(h["a"])(A,x,T,!1,null,"bbf1dc88",null));I.options.__file="SqliteTest0818.vue";var E=I.exports,F=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("section",{staticClass:"cf w-100 pa2-ns"},[a("article",{staticClass:"fl w-100 w-50-m w-25-ns pa2-ns"},[a("a",{staticClass:"link pointer hide-child",on:{click:function(t){e.next(1)}}},[a("div",{staticClass:"aspect-ratio aspect-ratio--1x1 v-mid w-100 h-100 child bg-near-white black pa5 b"},[e._v("\n      WASM in Go 1.11\n    ")]),e._m(0)])]),a("article",{staticClass:"fl w-100 w-50-m w-25-ns pa2-ns"},[a("a",{staticClass:"link pointer hide-child",on:{click:function(t){e.next(2)}}},[a("div",{staticClass:"aspect-ratio aspect-ratio--1x1 v-mid w-100 h-100 child bg-near-white black candycane pa5 b"},[e._v("\n      SQLite Test Drive\n    ")]),e._m(1)])]),e._m(2),e._m(3),e._m(4)])},L=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"ph2 ph0-ns pb3 db"},[a("h3",{staticClass:"f5 f4-ns mb0 black-90"},[e._v("WebAssembly")]),a("h3",{staticClass:"f6 f5 fw4 mt2 black-60"},[e._v("September 19")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"ph2 ph0-ns pb3 db"},[a("h3",{staticClass:"f5 f4-ns mb0 black-90"},[e._v("SQLite")]),a("h3",{staticClass:"f6 f5 fw4 mt2 black-60"},[e._v("August 18")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("article",{staticClass:"fl w-100 w-50-m  w-25-ns pa2-ns bg-washed-blue"},[a("a",{staticClass:"link hide-child",attrs:{href:"archive/2017/"}},[a("div",{staticClass:"aspect-ratio aspect-ratio--1x1 v-mid w-100 h-100 child bg-near-white black pa5 b"},[e._v("\n      2017\n    ")]),a("div",{staticClass:"ph2 ph0-ns pb3 db"},[a("h3",{staticClass:"f5 f4-ns mb0 black-90"},[e._v("Archive")]),a("h3",{staticClass:"f6 f5 fw4 mt2 black-60"},[e._v("2017")])])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("article",{staticClass:"fl w-100 w-50-m  w-25-ns pa2-ns"},[a("a",{staticClass:"link hide-child",attrs:{href:"archive/2016/"}},[a("div",{staticClass:"aspect-ratio aspect-ratio--1x1 v-mid w-100 h-100 child black gradl pa5 b"},[e._v("\n      2016\n    ")]),a("div",{staticClass:"ph2 ph0-ns pb3 link db"},[a("h3",{staticClass:"f5 f4-ns mb0 black-90"},[e._v("Archive")]),a("h3",{staticClass:"f6 f5 fw4 mt2 black-60"},[e._v("2016")])])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("article",{staticClass:"fl w-100 w-50-m  w-25-ns pa2-ns bg-washed-green"},[a("a",{staticClass:"link hide-child ",attrs:{href:"archive/2011/tfx.html"}},[a("div",{staticClass:"aspect-ratio aspect-ratio--1x1 v-mid w-100 h-100 child black grad pa5 b"},[e._v("\n      2011\n    ")]),a("div",{staticClass:"ph2 ph0-ns pb3 link db"},[a("h3",{staticClass:"f5 f4-ns mb0 black-90"},[e._v("Archive")]),a("h3",{staticClass:"f6 f5 fw4 mt2 black-60"},[e._v("2011")])])])])}],P={name:"Catalog",props:["next"]},W=P,G=(a("0293"),Object(h["a"])(W,F,L,!1,null,"a178a2fe",null));G.options.__file="Catalog.vue";var q=G.exports,H={name:"app",data(){return{catShowing:!1,mnuTitle:"Articles",view:"FHIRping0112"}},methods:{next(e){switch(this.catShowing=!1,e){case 1:this.view="WebAssembly0919";break;case 2:this.view="SqliteTest0818";break}},toggleCatalog(){this.catShowing=!this.catShowing,this.catShowing?this.view="Catalog":this.view="FHIRping0112"}},components:{Burger:d,FHIRping0112:m,WebAssembly0919:S,SqliteTest0818:E,Catalog:q}},O=H,j=(a("034f"),Object(h["a"])(O,n,r,!1,null,null,null));j.options.__file="App.vue";var D=j.exports,M=a("9483");Object(M["a"])("/service-worker.js",{ready(){console.log("App is being served from cache by a service worker.\nFor more details, visit https://goo.gl/AFskqB")},registered(){console.log("Service worker has been registered.")},cached(){console.log("Content has been cached for offline use.")},updatefound(){console.log("New content is downloading.")},updated(){console.log("New content is available; please refresh.")},offline(){console.log("No internet connection found. App is running in offline mode.")},error(e){console.error("Error during service worker registration:",e)}});a("948e");s["a"].config.productionTip=!1,new s["a"]({render:function(e){return e(D)}}).$mount("#app")},"64a9":function(e,t,a){},"6c17":function(e,t,a){"use strict";var s=a("9103"),n=a.n(s);n.a},8574:function(e,t,a){},9103:function(e,t,a){},"97c2":function(e,t,a){e.exports=a.p+"img/sysdiag.56d97958.svg"},a831:function(e,t,a){},bdb5:function(e,t,a){"use strict";var s=a("8574"),n=a.n(s);n.a},dca3:function(e,t,a){"use strict";var s=a("a831"),n=a.n(s);n.a}});
//# sourceMappingURL=app.74056246.js.map